name: CI

on:
  push:
    branches:
      - dev

jobs:
  merge-to-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Merge dev to test
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if test branch exists on remote
          if git ls-remote --exit-code --heads origin test; then
            echo "Branch test exists, checking out"
            git fetch origin test
            git checkout -B test origin/test
          else
            echo "Branch test does not exist, creating it"
            git checkout -b test
          fi
          
          # Merge dev into test
          if ! git merge origin/dev --no-commit; then
            echo "Merge conflict detected, resolving in favor of dev branch changes"
            git checkout --theirs .
            git add .
          fi
          
          git commit -m "Merge dev into test" || echo "No changes to commit"
          git push origin test

  run-tests:
    runs-on: ubuntu-latest
    needs: merge-to-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: test

      - name: Set up Ruby environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install Bundler
        run: gem install bundler

      - name: Install dependencies
        run: bundle install

      - name: List available Rake tasks
        run: rake -T

      - name: Run tests
        run: rake test

  merge-to-main:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout code from test branch
        uses: actions/checkout@v2
        with:
          ref: test

      - name: Set up Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch branches
        run: |
          git fetch origin main || echo "Main branch does not exist yet"
          git fetch origin test

      - name: Merge test into main
        run: |
          # Checkout or create main branch
          if git show-ref --quiet refs/remotes/origin/main; then
            git checkout -B main origin/main
          else
            git checkout -b main
          fi

          # Merge test into main
          if ! git merge origin/test --no-commit; then
            echo "Merge conflict detected, resolving in favor of test branch changes"
            git checkout --theirs .
            git add .
          fi

          git commit -m "Merge test into main" || echo "No changes to commit"

      - name: Push to main branch
        run: git push origin main

      - name: Create tag and push it
        id: tag_release
        run: |
          # Get the latest tag or default to v0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Extract version numbers
          MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
          PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
          echo "Current version: $MAJOR.$MINOR.$PATCH"

          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "Creating new tag: $NEW_TAG"

          # Create the tag and push it
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"

          # Set output for the new tag
          echo "::set-output name=new_tag::$NEW_TAG"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_release.outputs.new_tag }}
          release_name: "Release ${{ steps.tag_release.outputs.new_tag }}"
          draft: false
          prerelease: false
